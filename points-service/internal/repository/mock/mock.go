// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//      mockgen -source=repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
        reflect "reflect"

        entity "github.com/giicoo/osiris/points-service/internal/entity"
        gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
        ctrl     *gomock.Controller
        recorder *MockRepoMockRecorder
        isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
        mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
        mock := &MockRepo{ctrl: ctrl}
        mock.recorder = &MockRepoMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
        return m.recorder
}

// CloseConnection mocks base method.
func (m *MockRepo) CloseConnection() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CloseConnection")
        ret0, _ := ret[0].(error)
        return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockRepoMockRecorder) CloseConnection() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockRepo)(nil).CloseConnection))
}

// Connection mocks base method.
func (m *MockRepo) Connection() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Connection")
        ret0, _ := ret[0].(error)
        return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockRepoMockRecorder) Connection() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockRepo)(nil).Connection))
}

// CreatePoint mocks base method.
func (m *MockRepo) CreatePoint(point *entity.Point) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreatePoint", point)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreatePoint indicates an expected call of CreatePoint.
func (mr *MockRepoMockRecorder) CreatePoint(point any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoint", reflect.TypeOf((*MockRepo)(nil).CreatePoint), point)
}

// DeletePoint mocks base method.
func (m *MockRepo) DeletePoint(id int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeletePoint", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeletePoint indicates an expected call of DeletePoint.
func (mr *MockRepoMockRecorder) DeletePoint(id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoint", reflect.TypeOf((*MockRepo)(nil).DeletePoint), id)
}

// GetPoint mocks base method.
func (m *MockRepo) GetPoint(id int) (*entity.Point, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPoint", id)
        ret0, _ := ret[0].(*entity.Point)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPoint indicates an expected call of GetPoint.
func (mr *MockRepoMockRecorder) GetPoint(id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoint", reflect.TypeOf((*MockRepo)(nil).GetPoint), id)
}

// GetPoints mocks base method.
func (m *MockRepo) GetPoints(user_id int) ([]*entity.Point, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPoints", user_id)
        ret0, _ := ret[0].([]*entity.Point)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockRepoMockRecorder) GetPoints(user_id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockRepo)(nil).GetPoints), user_id)
}

// UpdateLocation mocks base method.
func (m *MockRepo) UpdateLocation(id int, location string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateLocation", id, location)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockRepoMockRecorder) UpdateLocation(id, location any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockRepo)(nil).UpdateLocation), id, location)
}

// UpdateRadius mocks base method.
func (m *MockRepo) UpdateRadius(id, radius int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateRadius", id, radius)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateRadius indicates an expected call of UpdateRadius.
func (mr *MockRepoMockRecorder) UpdateRadius(id, radius any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRadius", reflect.TypeOf((*MockRepo)(nil).UpdateRadius), id, radius)
}

// UpdateTitle mocks base method.
func (m *MockRepo) UpdateTitle(id int, title string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateTitle", id, title)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateTitle indicates an expected call of UpdateTitle.
func (mr *MockRepoMockRecorder) UpdateTitle(id, title any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTitle", reflect.TypeOf((*MockRepo)(nil).UpdateTitle), id, title)
}