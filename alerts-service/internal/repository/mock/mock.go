// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//      mockgen -source=repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
        reflect "reflect"

        entity "github.com/giicoo/osiris/alerts-service/internal/entity"
        gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
        ctrl     *gomock.Controller
        recorder *MockRepoMockRecorder
        isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
        mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
        mock := &MockRepo{ctrl: ctrl}
        mock.recorder = &MockRepoMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
        return m.recorder
}

// CloseConnection mocks base method.
func (m *MockRepo) CloseConnection() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CloseConnection")
        ret0, _ := ret[0].(error)
        return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockRepoMockRecorder) CloseConnection() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockRepo)(nil).CloseConnection))
}

// Connection mocks base method.
func (m *MockRepo) Connection() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Connection")
        ret0, _ := ret[0].(error)
        return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockRepoMockRecorder) Connection() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockRepo)(nil).Connection))
}

// CreateAlert mocks base method.
func (m *MockRepo) CreateAlert(alert *entity.Alert) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateAlert", alert)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateAlert indicates an expected call of CreateAlert.
func (mr *MockRepoMockRecorder) CreateAlert(alert any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockRepo)(nil).CreateAlert), alert)
}

// CreateType mocks base method.
func (m *MockRepo) CreateType(typeModel *entity.Type) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateType", typeModel)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateType indicates an expected call of CreateType.
func (mr *MockRepoMockRecorder) CreateType(typeModel any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateType", reflect.TypeOf((*MockRepo)(nil).CreateType), typeModel)
}

// DeleteType mocks base method.
func (m *MockRepo) DeleteType(id int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteType", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteType indicates an expected call of DeleteType.
func (mr *MockRepoMockRecorder) DeleteType(id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteType", reflect.TypeOf((*MockRepo)(nil).DeleteType), id)
}

// GetAlert mocks base method.
func (m *MockRepo) GetAlert(id int) (*entity.Alert, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAlert", id)
        ret0, _ := ret[0].(*entity.Alert)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockRepoMockRecorder) GetAlert(id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockRepo)(nil).GetAlert), id)
}

// GetAlerts mocks base method.
func (m *MockRepo) GetAlerts() ([]*entity.Alert, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAlerts")
        ret0, _ := ret[0].([]*entity.Alert)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockRepoMockRecorder) GetAlerts() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockRepo)(nil).GetAlerts))
}

// GetType mocks base method.
func (m *MockRepo) GetType(id int) (*entity.Type, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetType", id)
        ret0, _ := ret[0].(*entity.Type)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockRepoMockRecorder) GetType(id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockRepo)(nil).GetType), id)
}

// GetTypes mocks base method.
func (m *MockRepo) GetTypes() ([]*entity.Type, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetTypes")
        ret0, _ := ret[0].([]*entity.Type)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetTypes indicates an expected call of GetTypes.
func (mr *MockRepoMockRecorder) GetTypes() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypes", reflect.TypeOf((*MockRepo)(nil).GetTypes))
}

// UpdateStatusAlert mocks base method.
func (m *MockRepo) UpdateStatusAlert(id int, status bool) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateStatusAlert", id, status)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateStatusAlert indicates an expected call of UpdateStatusAlert.
func (mr *MockRepoMockRecorder) UpdateStatusAlert(id, status any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAlert", reflect.TypeOf((*MockRepo)(nil).UpdateStatusAlert), id, status)
}